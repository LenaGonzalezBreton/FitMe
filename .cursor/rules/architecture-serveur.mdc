---
description: 
globs: 
alwaysApply: true
---
# Guide d'Architecture du Serveur (Architecture Propre + DDD)

Ce document d√©crit les principes d'architecture pour le backend NestJS de l'application FitMe, en s'inspirant de l'Architecture Propre (Clean Architecture) et du Domain-Driven Design (DDD). L'objectif est de construire une base de code modulaire, √©volutive et facile √† maintenir.

Le contexte et les fonctionnalit√©s du projet sont d√©taill√©s dans [FitMe.md](mdc:FitMe.md).

## üìÅ Structure des Dossiers Principaux (`/server/src`)

Le dossier `src` est organis√© en trois zones principales :

*   `modules/` : Contient les diff√©rents domaines m√©tier de l'application (ex: `user`, `cycle`).
*   `core/` : Regroupe l'infrastructure globale de l'application et la logique du framework (ex: configuration, logs, gardes).
*   `shared/` : Contient du code partag√© et agnostique au framework, comme des utilitaires ou des entit√©s de base.

---

## üì¶ Structure d'un Module (Dans `src/modules/`)

Chaque domaine m√©tier est encapsul√© dans son propre module. Cela favorise la s√©paration des responsabilit√©s et la modularit√©. Chaque module devrait suivre cette structure en couches :

### 1. `domain`

C'est le c≈ìur du module. Il contient la logique m√©tier et est compl√®tement ind√©pendant de tout framework ou d√©pendance externe.

*   **`*.entity.ts`** : Repr√©sente les objets du domaine (ex: `User`, `Cycle`). Contient les r√®gles et la logique m√©tier.
*   **`*.repository.ts`** : D√©finit les interfaces pour la persistance des donn√©es (ex: `IUserRepository`). L'impl√©mentation se trouve dans la couche `infrastructure`.
*   **Enums, Value Objects, Domain Events** : Tout autre concept fondamental du domaine.

### 2. `application`

Cette couche orchestre la logique du domaine pour accomplir les t√¢ches sp√©cifiques requises par l'application.

*   **`use-cases/`** : Contient des classes qui impl√©mentent des actions applicatives sp√©cifiques (ex: `CreateUserUseCase`). Les cas d'utilisation sont les points d'entr√©e de la logique applicative.
*   **`*.service.ts`** : (Optionnel) Services applicatifs qui ne sont pas des cas d'utilisation mais qui sont n√©cessaires pour coordonner la logique.

### 3. `infrastructure`

Cette couche contient l'impl√©mentation des interfaces d√©finies dans la couche `domain`. C'est ici que l'application interagit avec le monde ext√©rieur (base de donn√©es, APIs externes, etc.).

*   **`prisma-*.repository.ts`** : L'impl√©mentation concr√®te d'une interface de repository utilisant une technologie sp√©cifique comme Prisma ou TypeORM.
*   **Adapters, Gateways** : Code pour interagir avec des syst√®mes externes comme Firebase.

### 4. `controller` (ou `presentation`)

Cette couche expose les fonctionnalit√©s de l'application au monde ext√©rieur, g√©n√©ralement via une API REST.

*   **`*.controller.ts`** : Contr√¥leurs NestJS qui g√®rent les requ√™tes HTTP entrantes. Ils doivent √™tre l√©gers, se contentant de mapper les requ√™tes au cas d'utilisation appropri√© dans la couche `application`.
*   **`dto/`** : Data Transfer Objects utilis√©s pour d√©finir la forme des donn√©es entrant et sortant de l'API.

### 5. `*.module.ts`

Le fichier de module NestJS (`user.module.ts`, `cycle.module.ts`, etc.) qui relie toutes les couches entre elles gr√¢ce √† l'injection de d√©pendances.

---

## üîß Core & Shared

*   **`core/`** : Ce dossier est destin√© aux pr√©occupations transversales qui sont li√©es au framework NestJS. Il inclut :
    *   `config/` : Configuration de l'application.
    *   `guards/` : Gardes d'authentification/autorisation.
    *   `interceptors/` : Intercepteurs de requ√™tes/r√©ponses.
    *   `prisma.service.ts` : Le service client Prisma.

*   **`shared/`** : Ce dossier est pour le code qui peut √™tre partag√© entre plusieurs modules et qui est **agnostique au framework**.
    *   `utils/` : Fonctions utilitaires g√©n√©riques.
    *   `constants/` : Constantes globales.
    *   `base-entity.ts` : Une classe d'entit√© de base si des propri√©t√©s communes sont partag√©es entre les entit√©s du domaine.

