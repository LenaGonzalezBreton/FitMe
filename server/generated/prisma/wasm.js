
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CycleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  startDate: 'startDate',
  cycleLength: 'cycleLength',
  periodLength: 'periodLength',
  isRegular: 'isRegular',
  providerId: 'providerId',
  externalCycleId: 'externalCycleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CycleProfileConfigScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  isCycleTrackingEnabled: 'isCycleTrackingEnabled',
  usesExternalProvider: 'usesExternalProvider',
  useMenopauseMode: 'useMenopauseMode',
  averageCycleLength: 'averageCycleLength',
  averagePeriodLength: 'averagePeriodLength',
  prefersManualInput: 'prefersManualInput',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CycleProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PhaseScalarFieldEnum = {
  id: 'id',
  cycleId: 'cycleId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl',
  durationMinutes: 'durationMinutes',
  intensity: 'intensity',
  muscleZone: 'muscleZone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseTagScalarFieldEnum = {
  id: 'id',
  exerciseId: 'exerciseId',
  tagId: 'tagId',
  createdAt: 'createdAt'
};

exports.Prisma.PhaseExerciseScalarFieldEnum = {
  id: 'id',
  phaseName: 'phaseName',
  exerciseId: 'exerciseId',
  createdAt: 'createdAt'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  goal: 'goal',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramExerciseScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  exerciseId: 'exerciseId',
  day: 'day',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  date: 'date',
  relatedPhase: 'relatedPhase',
  relatedProgramId: 'relatedProgramId',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExternalSyncScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  entitySynced: 'entitySynced',
  externalId: 'externalId',
  status: 'status',
  message: 'message',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JournalEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  category: 'category',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldData: 'oldData',
  newData: 'newData',
  createdAt: 'createdAt'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  description: 'description',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  revoked: 'revoked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  lastSeen: 'lastSeen',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MoodTrackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  mood: 'mood',
  energy: 'energy',
  pain: 'pain',
  stress: 'stress',
  sleepQuality: 'sleepQuality',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SymptomLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  symptomType: 'symptomType',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  unitPreference: 'unitPreference',
  notificationEnabled: 'notificationEnabled',
  notificationTime: 'notificationTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReminderSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  enabled: 'enabled',
  time: 'time',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFeatureFlagScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  feature: 'feature',
  isEnabled: 'isEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserObjectiveScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileChangeLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  changeType: 'changeType',
  details: 'details',
  changedAt: 'changedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  birthDate: 'birthDate',
  isMenopausal: 'isMenopausal',
  objective: 'objective',
  sportFrequency: 'sportFrequency',
  profileType: 'profileType',
  contextType: 'contextType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CyclePhase = exports.$Enums.CyclePhase = {
  MENSTRUAL: 'MENSTRUAL',
  FOLLICULAR: 'FOLLICULAR',
  OVULATION: 'OVULATION',
  LUTEAL: 'LUTEAL'
};

exports.Intensity = exports.$Enums.Intensity = {
  VERY_LOW: 'VERY_LOW',
  LOW: 'LOW',
  MODERATE: 'MODERATE',
  HIGH: 'HIGH',
  VERY_HIGH: 'VERY_HIGH'
};

exports.MuscleZone = exports.$Enums.MuscleZone = {
  UPPER_BODY: 'UPPER_BODY',
  LOWER_BODY: 'LOWER_BODY',
  CORE: 'CORE',
  FULL_BODY: 'FULL_BODY',
  CARDIO: 'CARDIO',
  FLEXIBILITY: 'FLEXIBILITY',
  BALANCE: 'BALANCE'
};

exports.TagType = exports.$Enums.TagType = {
  DIFFICULTY: 'DIFFICULTY',
  EQUIPMENT: 'EQUIPMENT',
  MUSCLE_GROUP: 'MUSCLE_GROUP',
  OBJECTIVE: 'OBJECTIVE',
  DURATION: 'DURATION',
  STYLE: 'STYLE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  CYCLE_REMINDER: 'CYCLE_REMINDER',
  EXERCISE_REMINDER: 'EXERCISE_REMINDER',
  MEDICATION_REMINDER: 'MEDICATION_REMINDER',
  MOOD_TRACKING_REMINDER: 'MOOD_TRACKING_REMINDER',
  PERIOD_PREDICTION: 'PERIOD_PREDICTION',
  OVULATION_PREDICTION: 'OVULATION_PREDICTION',
  PROGRAM_MILESTONE: 'PROGRAM_MILESTONE',
  GENERAL_TIP: 'GENERAL_TIP',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE'
};

exports.ExternalProvider = exports.$Enums.ExternalProvider = {
  APPLE_HEALTH: 'APPLE_HEALTH',
  GOOGLE_FIT: 'GOOGLE_FIT',
  FITBIT: 'FITBIT',
  GARMIN: 'GARMIN',
  STRAVA: 'STRAVA',
  MYFITNESSPAL: 'MYFITNESSPAL',
  CLUE: 'CLUE',
  FLO: 'FLO',
  PERIOD_TRACKER: 'PERIOD_TRACKER'
};

exports.ExternalSyncStatus = exports.$Enums.ExternalSyncStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  PARTIAL: 'PARTIAL',
  SKIPPED: 'SKIPPED'
};

exports.JournalCategory = exports.$Enums.JournalCategory = {
  GENERAL: 'GENERAL',
  CYCLE: 'CYCLE',
  EXERCISE: 'EXERCISE',
  MOOD: 'MOOD',
  NUTRITION: 'NUTRITION',
  SLEEP: 'SLEEP',
  STRESS: 'STRESS',
  GOALS: 'GOALS',
  ACHIEVEMENTS: 'ACHIEVEMENTS'
};

exports.EventType = exports.$Enums.EventType = {
  USER_LOGIN: 'USER_LOGIN',
  USER_LOGOUT: 'USER_LOGOUT',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  CYCLE_LOG: 'CYCLE_LOG',
  EXERCISE_COMPLETE: 'EXERCISE_COMPLETE',
  MOOD_LOG: 'MOOD_LOG',
  SYMPTOM_LOG: 'SYMPTOM_LOG',
  PROGRAM_START: 'PROGRAM_START',
  PROGRAM_COMPLETE: 'PROGRAM_COMPLETE',
  SYNC_EXTERNAL: 'SYNC_EXTERNAL',
  ERROR_OCCURRED: 'ERROR_OCCURRED'
};

exports.MoodType = exports.$Enums.MoodType = {
  VERY_HAPPY: 'VERY_HAPPY',
  HAPPY: 'HAPPY',
  NEUTRAL: 'NEUTRAL',
  SAD: 'SAD',
  VERY_SAD: 'VERY_SAD',
  ANXIOUS: 'ANXIOUS',
  IRRITATED: 'IRRITATED',
  CALM: 'CALM',
  ENERGETIC: 'ENERGETIC',
  TIRED: 'TIRED',
  STRESSED: 'STRESSED',
  RELAXED: 'RELAXED'
};

exports.EnergyLevel = exports.$Enums.EnergyLevel = {
  VERY_LOW: 'VERY_LOW',
  LOW: 'LOW',
  MODERATE: 'MODERATE',
  HIGH: 'HIGH',
  VERY_HIGH: 'VERY_HIGH'
};

exports.PainLevel = exports.$Enums.PainLevel = {
  NONE: 'NONE',
  LIGHT: 'LIGHT',
  MODERATE: 'MODERATE',
  SEVERE: 'SEVERE',
  VERY_SEVERE: 'VERY_SEVERE'
};

exports.StressLevel = exports.$Enums.StressLevel = {
  NONE: 'NONE',
  LOW: 'LOW',
  MODERATE: 'MODERATE',
  HIGH: 'HIGH',
  VERY_HIGH: 'VERY_HIGH'
};

exports.SleepQuality = exports.$Enums.SleepQuality = {
  VERY_POOR: 'VERY_POOR',
  POOR: 'POOR',
  FAIR: 'FAIR',
  GOOD: 'GOOD',
  EXCELLENT: 'EXCELLENT'
};

exports.SymptomType = exports.$Enums.SymptomType = {
  CRAMPS: 'CRAMPS',
  BLOATING: 'BLOATING',
  HEADACHE: 'HEADACHE',
  BACK_PAIN: 'BACK_PAIN',
  BREAST_TENDERNESS: 'BREAST_TENDERNESS',
  ACNE: 'ACNE',
  MOOD_SWINGS: 'MOOD_SWINGS',
  FATIGUE: 'FATIGUE',
  NAUSEA: 'NAUSEA',
  FOOD_CRAVINGS: 'FOOD_CRAVINGS',
  CONSTIPATION: 'CONSTIPATION',
  DIARRHEA: 'DIARRHEA',
  HOT_FLASHES: 'HOT_FLASHES',
  COLD_FLASHES: 'COLD_FLASHES',
  JOINT_PAIN: 'JOINT_PAIN',
  INSOMNIA: 'INSOMNIA'
};

exports.UnitPreference = exports.$Enums.UnitPreference = {
  METRIC: 'METRIC',
  IMPERIAL: 'IMPERIAL'
};

exports.ReminderType = exports.$Enums.ReminderType = {
  PERIOD_START: 'PERIOD_START',
  OVULATION: 'OVULATION',
  EXERCISE: 'EXERCISE',
  MEDICATION: 'MEDICATION',
  MOOD_TRACKING: 'MOOD_TRACKING',
  SYMPTOM_LOGGING: 'SYMPTOM_LOGGING',
  WATER_INTAKE: 'WATER_INTAKE',
  SLEEP_REMINDER: 'SLEEP_REMINDER'
};

exports.ObjectiveType = exports.$Enums.ObjectiveType = {
  WEIGHT_LOSS: 'WEIGHT_LOSS',
  MUSCLE_GAIN: 'MUSCLE_GAIN',
  ENDURANCE: 'ENDURANCE',
  STRENGTH: 'STRENGTH',
  FLEXIBILITY: 'FLEXIBILITY',
  GENERAL_FITNESS: 'GENERAL_FITNESS',
  STRESS_REDUCTION: 'STRESS_REDUCTION',
  ENERGY_BOOST: 'ENERGY_BOOST'
};

exports.ChangeType = exports.$Enums.ChangeType = {
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  SETTINGS_UPDATE: 'SETTINGS_UPDATE',
  CYCLE_CONFIG_UPDATE: 'CYCLE_CONFIG_UPDATE',
  OBJECTIVE_UPDATE: 'OBJECTIVE_UPDATE',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE'
};

exports.SportFrequency = exports.$Enums.SportFrequency = {
  SEDENTARY: 'SEDENTARY',
  LIGHT: 'LIGHT',
  MODERATE: 'MODERATE',
  ACTIVE: 'ACTIVE',
  VERY_ACTIVE: 'VERY_ACTIVE'
};

exports.ProfileType = exports.$Enums.ProfileType = {
  FEMALE: 'FEMALE',
  MALE: 'MALE',
  NON_BINARY: 'NON_BINARY',
  OTHER: 'OTHER'
};

exports.ContextType = exports.$Enums.ContextType = {
  CYCLE: 'CYCLE',
  GENERAL: 'GENERAL',
  MENOPAUSE: 'MENOPAUSE',
  NONE: 'NONE'
};

exports.Prisma.ModelName = {
  Cycle: 'Cycle',
  CycleProfileConfig: 'CycleProfileConfig',
  CycleProvider: 'CycleProvider',
  Phase: 'Phase',
  Exercise: 'Exercise',
  Tag: 'Tag',
  ExerciseTag: 'ExerciseTag',
  PhaseExercise: 'PhaseExercise',
  Program: 'Program',
  ProgramExercise: 'ProgramExercise',
  Notification: 'Notification',
  ExternalSync: 'ExternalSync',
  JournalEntry: 'JournalEntry',
  AuditLog: 'AuditLog',
  Log: 'Log',
  RefreshToken: 'RefreshToken',
  AuthSession: 'AuthSession',
  MoodTrack: 'MoodTrack',
  SymptomLog: 'SymptomLog',
  UserSettings: 'UserSettings',
  ReminderSettings: 'ReminderSettings',
  UserFeatureFlag: 'UserFeatureFlag',
  UserObjective: 'UserObjective',
  ProfileChangeLog: 'ProfileChangeLog',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
