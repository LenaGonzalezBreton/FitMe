const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// =============================================================================
// CONFIGURATION
// =============================================================================
const SCRIPT_DIR = __dirname;
const SERVER_DIR = path.dirname(SCRIPT_DIR);
const PRISMA_DIR = path.join(SERVER_DIR, 'prisma');
const OUTPUT_FILE = path.join(PRISMA_DIR, 'schema.prisma');

const DIRS_TO_SCAN = {
  base: { path: path.join(PRISMA_DIR, 'base'), header: null },
  enums: { path: path.join(PRISMA_DIR, 'enums'), header: '√âNUM√âRATIONS' },
  models: { path: path.join(PRISMA_DIR, 'models'), header: 'MOD√àLES DE DONN√âES' },
};

// Options depuis les arguments de ligne de commande
const args = process.argv.slice(2);
const options = {
  force: args.includes('--force'),
  push: args.includes('--push'),
  seed: args.includes('--seed'),
};

// =============================================================================
// LOGIQUE DU SCRIPT
// =============================================================================

console.log('üîÑ Lancement du script de construction automatique du sch√©ma Prisma...');
console.log(`   Fichier de sortie : ${path.relative(SERVER_DIR, OUTPUT_FILE)}`);

/**
 * R√©cup√®re tous les fichiers .prisma dans un r√©pertoire de mani√®re r√©cursive.
 * @param {string} dir - Le r√©pertoire √† scanner.
 * @returns {string[]} Une liste des chemins de fichiers.
 */
function getPrismaFiles(dir) {
  if (!fs.existsSync(dir)) {
    console.warn(`   -> ‚ö†Ô∏è Le dossier n'existe pas : ${path.relative(SERVER_DIR, dir)}, il sera ignor√©.`);
    return [];
  }

  const files = [];
  
  const scanDirectory = (currentDir) => {
    try {
      const items = fs.readdirSync(currentDir, { withFileTypes: true });
      
      for (const item of items) {
        const fullPath = path.join(currentDir, item.name);
        
        if (item.isDirectory()) {
          scanDirectory(fullPath);
        } else if (item.isFile() && path.extname(item.name) === '.prisma') {
          files.push(fullPath);
        }
      }
    } catch (error) {
      console.error(`   -> ‚ùå Erreur lors de la lecture du dossier ${currentDir}:`, error.message);
    }
  };

  scanDirectory(dir);
  return files.sort(); // Trier pour un ordre constant
}

/**
 * Lit et combine le contenu de plusieurs fichiers.
 * @param {string[]} files - Liste des chemins de fichiers
 * @returns {string} Contenu combin√©
 */
function readAndCombineFiles(files) {
  return files
    .map(file => {
      try {
        return fs.readFileSync(file, 'utf8').trim();
      } catch (error) {
        console.error(`   -> ‚ùå Erreur lors de la lecture de ${file}:`, error.message);
        return '';
      }
    })
    .filter(content => content.length > 0)
    .join('\n\n');
}

/**
 * V√©rifie si le rebuild est n√©cessaire en comparant les timestamps
 * @returns {boolean} True si le rebuild est n√©cessaire
 */
function shouldRebuild() {
  if (!fs.existsSync(OUTPUT_FILE)) {
    return true;
  }

  const outputStat = fs.statSync(OUTPUT_FILE);
  const outputTime = outputStat.mtime.getTime();

  for (const [dirName, { path: dir }] of Object.entries(DIRS_TO_SCAN)) {
    const files = getPrismaFiles(dir);
    
    for (const file of files) {
      const fileStat = fs.statSync(file);
      if (fileStat.mtime.getTime() > outputTime) {
        console.log(`   -> Modification d√©tect√©e dans : ${path.relative(SERVER_DIR, file)}`);
        return true;
      }
    }
  }

  console.log('   -> Aucune modification d√©tect√©e, skip du rebuild.');
  return false;
}

/**
 * Construit le sch√©ma final en concat√©nant les fichiers partiels.
 */
function buildSchema() {
  console.log('   -> Assemblage des modules de sch√©ma...');

  const schemaHeader = `// =============================================================================
// ATTENTION : Fichier auto-g√©n√©r√© par le script 'build-schema.js'.
// NE PAS MODIFIER CE FICHIER DIRECTEMENT.
//
// Pour faire des changements, modifiez les fichiers sources dans :
// - /prisma/base/
// - /prisma/enums/
// - /prisma/models/
// =============================================================================\n\n`;

  const schemaContent = [schemaHeader];
  let totalFiles = 0;

  // Traitement de chaque r√©pertoire dans l'ordre d√©fini
  for (const [dirName, { path: directoryPath, header }] of Object.entries(DIRS_TO_SCAN)) {
    const files = getPrismaFiles(directoryPath);
    
    if (files.length === 0) {
      console.log(`      - Aucun fichier trouv√© dans : ${dirName}`);
      continue;
    }

    console.log(`      - Ajout des fichiers de : ${dirName} (${files.length} fichier${files.length > 1 ? 's' : ''})`);
    totalFiles += files.length;
    
    if (header) {
      schemaContent.push(`// --- ${header} ---`);
    }
    
    const combinedContent = readAndCombineFiles(files);
    if (combinedContent) {
      schemaContent.push(combinedContent);
    }
  }

  // √âcriture du fichier final avec gestion d'erreurs
  try {
    const finalContent = schemaContent.join('\n') + '\n';
    fs.writeFileSync(OUTPUT_FILE, finalContent, 'utf8');
    console.log(`‚úÖ Sch√©ma Prisma g√©n√©r√© avec succ√®s ! (${totalFiles} fichiers, ${finalContent.length} caract√®res)`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'√©criture du fichier final :', error.message);
    throw error;
  }
}

/**
 * Ex√©cute une commande syst√®me avec gestion d'erreurs
 * @param {string} command - La commande √† ex√©cuter
 * @param {string} description - Description de l'action
 * @returns {boolean} True si succ√®s, False si √©chec
 */
function executeCommand(command, description) {
  try {
    console.log(`   -> ${description}...`);
    execSync(command, { 
      cwd: SERVER_DIR, 
      stdio: 'inherit',
      timeout: 120000 // 2 minutes timeout
    });
    console.log(`   ‚úÖ ${description} termin√© avec succ√®s`);
    return true;
  } catch (error) {
    console.error(`   ‚ùå Erreur lors de ${description.toLowerCase()}:`);
    console.error(`      Commande: ${command}`);
    console.error(`      Erreur: ${error.message}`);
    return false;
  }
}

/**
 * Ex√©cute le push de la base de donn√©es
 * @returns {boolean} True si succ√®s
 */
function executePush() {
  console.log('\nüîÑ Push de la base de donn√©es...');
  return executeCommand('npm run prisma:push', 'Push de la base de donn√©es');
}

/**
 * Ex√©cute les seeders si disponibles
 * @returns {boolean} True si succ√®s
 */
function executeSeed() {
  console.log('\nüå± Ex√©cution des seeders...');
  
  // V√©rifier quels scripts de seed sont disponibles
  const packageJsonPath = path.join(SERVER_DIR, 'package.json');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const scripts = packageJson.scripts || {};
    
    const seedScripts = Object.keys(scripts).filter(script => 
      script.startsWith('demo:') || script.includes('seed')
    );
    
    if (seedScripts.length === 0) {
      console.log('   ‚ö†Ô∏è Aucun script de seed trouv√© dans package.json');
      return true;
    }
    
    console.log(`   -> Scripts de seed disponibles: ${seedScripts.join(', ')}`);
    
    // Ex√©cuter les scripts de demo/seed
    for (const script of seedScripts) {
      if (!executeCommand(`npm run ${script}`, `Ex√©cution du script ${script}`)) {
        return false;
      }
    }
    
    return true;
    
  } catch (error) {
    console.error(`   ‚ùå Erreur lors de la lecture de package.json:`, error.message);
    return false;
  }
}

// =============================================================================
// EX√âCUTION
// =============================================================================

/**
 * Fonction principale d'ex√©cution
 */
async function main() {
  try {
    // Afficher les options activ√©es
    if (options.force || options.push || options.seed) {
      console.log('üìã Options activ√©es:', Object.entries(options)
        .filter(([_, value]) => value)
        .map(([key, _]) => `--${key}`)
        .join(', ')
      );
    }

    // V√©rifier si le rebuild est n√©cessaire (sauf si --force)
    if (!options.force && !shouldRebuild()) {
      console.log('‚è≠Ô∏è Schema √† jour, aucune action n√©cessaire.');
      
      // M√™me si le schema n'a pas chang√©, on peut faire push/seed si demand√©
      if (options.push || options.seed) {
        console.log('üîÑ Mais ex√©cution des actions suppl√©mentaires demand√©es...');
      } else {
        return;
      }
    } else {
      // Build du schema
      const buildSuccess = buildSchema();
      if (!buildSuccess) {
        throw new Error('√âchec de la construction du sch√©ma');
      }
    }

    // Push en base de donn√©es si demand√©
    if (options.push) {
      const pushSuccess = executePush();
      if (!pushSuccess) {
        throw new Error('√âchec du push en base de donn√©es');
      }
    }

    // Ex√©cution des seeders si demand√©
    if (options.seed) {
      const seedSuccess = executeSeed();
      if (!seedSuccess) {
        throw new Error('√âchec de l\'ex√©cution des seeders');
      }
    }

    // Message final de succ√®s
    console.log('\nüéâ Toutes les op√©rations ont √©t√© ex√©cut√©es avec succ√®s !');
    
    if (options.push || options.seed) {
      console.log('üí° Tips: Vous pouvez maintenant utiliser npm run prisma:studio pour explorer votre base de donn√©es');
    }

  } catch (error) {
    console.error('\n‚ùå Une erreur est survenue :', error.message);
    console.error('\nüîç Aide:');
    console.error('  - V√©rifiez que votre base de donn√©es est accessible');
    console.error('  - Utilisez --force pour forcer le rebuild du schema');
    console.error('  - Utilisez --push pour pousser les changements en base');
    console.error('  - Utilisez --seed pour ex√©cuter les seeders');
    console.error('\nExemples:');
    console.error('  npm run prisma:build');
    console.error('  npm run prisma:build -- --force --push --seed');
    process.exit(1);
  }
}

// Point d'entr√©e
main();